---
- name: Verify server's IP
  assert:
    that: wg_server_ip | ipv4
    success_msg: "Server's private IP: {{ wg_server_ip }}"
    fail_msg: "Incorrect server IP: {{ wg_server_ip }}"

- name: Verify that server`s IP is within its subnet
  assert:
    that: wg_server_ip | ipv4(wg_server_subnet)
    success_msg: "Provisioning subnet: {{ wg_server_subnet }}"
    fail_msg: "Incorrect server subnet: {{ wg_server_subnet }}"

- name: Verify Wireguard port
  assert:
    that: wg_port | int > 1 and wg_port | int < 65535
    success_msg: "Server will be listening on port {{ wg_port }}"
    fail_msg: "Invalid port number: {{ wg_port }}"

- name: Verify interface name
  assert:
    that: wg_iface | length > 1
    success_msg: "Wireguard interface: {{ wg_iface }}"
    fail_msg: "Invalid interface name: {{ wg_iface }}"

- name: Verify peers' names
  assert:
    that:
      - item.name | length > 1
      - item.name is search("^[a-zA-Z0-9]*$")
    success_msg: "Deploying peer: {{ item.name }}"
    fail_msg: "Invalid peer name: {{ item.name }}"
    quiet: yes
  loop: "{{ wg_clients }}"
  loop_control:
      label: "{{ item.name }}"
  when: wg_clients | length > 0

- name: Verify peers' IPs
  assert:
    that:
      - item.ip | ipv4(wg_server_subnet)
    success_msg: "Deploying peer with IP: {{ item.ip }}"
    fail_msg: "Peer {{ item.ip }} is outside of server's subnet {{ wg_server_subnet }}"
    quiet: yes
  loop: "{{ wg_clients }}"
  loop_control:
      label: "{{ item.ip }}"
  when: wg_clients | length > 0

- name: Verify peers' keys lengths
  assert:
    that:
      - item.pubkey | length == 44
      - item.psk | length == 44
    quiet: yes
    success_msg: "Client's keys are 44 symbols long"
    fail_msg: "Key length is wrong"
  loop: "{{ wg_clients }}"
  loop_control:
      label: "{{ item.name }}"
  when: wg_clients | length > 0

  # No usable config can be <2 bytes
- name: Check if there is an existing config
  find:
    paths: /etc/wireguard
    patterns: '{{ wg_iface }}.conf'
    size: '2'
  register: wg_existing_conf

- name: Check if there is an existing Wireguard interface
  command: wg show interfaces
  register: wg_existing_interfaces

- name: Load "listen_ports_facts" module
  listen_ports_facts:

- name: Save port state in a variable
  set_fact:
    wg_port_exists: "{{ wg_port in udp_listen | map(attribute='port') | flatten }}"

- name: Determine if detected WG instance is listening on the port we want to use
  shell:
    cmd: "wg show {{ wg_iface }} | head -5 | grep 'listening port:' | rev | cut -d' ' -f1 | rev"
  register: wg_iface_current_port

- name: Assert we are not trying to provision on a busy port without permission
  assert:
    that: not wg_port_exists
    success_msg: "Provisioning Wireguard on port {{ wg_port }}"
    fail_msg: "Port {{ wg_port }} is already occupied on the target host and 'wg_overwrite' is False"
  when:
    - not wg_overwrite
    - wg_existing_conf.files | length > 0

- name: Assert we are overwriting an existing WG instance listening on the same port
  assert:
    that: wg_iface_current_port.stdout | int == wg_port
    success_msg: "Port {{ wg_port }} is occupied by {{ wg_iface }} and will be replaced by the new WG instance"
    fail_msg: "Port {{ wg_port }} is already occupied by {{ wg_iface }} on the target host and 'wg_overwrite' is set to False"
  when:
    - wg_overwrite
    - wg_port_exists
    - wg_existing_conf.files | length > 0
    - wg_iface in wg_existing_interfaces.stdout
    - wg_iface_current_port.stdout | int == wg_port

- name: Assert that we are not overwriting config without permission
  assert:
    that: wg_existing_conf.files | length == 0
    fail_msg: "Config /etc/wireguard/{{ wg_iface }}.conf exists and 'wg_overwrite' is set to False"
    success_msg: "/etc/wireguard/{{ wg_iface }}.conf not found, continuing..."
  when: wg_overwrite is false

- name: Tear-down the existing Wireguard interface
  shell:
    cmd: "wg-quick down {{ wg_iface }}"
  when:
    - wg_overwrite
    - wg_existing_conf.files | length > 0
    - wg_iface in wg_existing_interfaces.stdout
