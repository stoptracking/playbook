---

- name: Check if requested user is already present
  shell:
    cmd: "grep {{ agent_name }} /etc/passwd"
  register: user_grep
  changed_when: False

- name: Assert that user isn't already present on the system
  assert:
    that:
      - "{{ user_grep.rc | int == 1 }}"
    fail_msg: "User '{{ agent_name }}' is found and 'remove_existing_user' is set to False.\nAborting."
    success_msg: "User '{{ agent_name }}' and all its files will be deleted."
  when: not remove_existing_user

- block:

  - name: Delete pre-existing user
    user:
      name: "{{ agent_name }}"
      state: absent
      remove: yes
      force: true
    when: user_grep.rc | int == 0 and remove_existing_user

  - name: Ensure agents group is present
    group:
      name: "{{ agent_group }}"
      state: present

  - name: Throw random seeds
    set_fact:
      rnd_a: "{{ 4096 | random }}"
      rnd_b: "{{ 4096 | random }}"
      rnd_c: "{{ 4096 | random }}"
      rnd_d: "{{ 4096 | random }}"
      rnd_e: "{{ 4096 | random }}"

  - name: Create random password and salt
    set_fact:
      password_raw: "{{ lookup('password', '/dev/null') }}"
      salt: "{{ rnd_a+rnd_b+rnd_c+rnd_d+rnd_e }}"

  - name: Create xfer user
    user:
      name: "{{ agent_name }}"
      shell: /bin/sh
      password: "{{ password_raw | password_hash('sha512', salt) }}"
      groups: agents

  - block:

    - name: Obtain username of the sudo user
      shell:
        cmd: "printenv | grep -i SUDO_USER | cut -d= -f2"
      register: sudo_username
      changed_when: False

    - name: Get sudo user's ssh path
      shell:
        cmd: "echo $( getent passwd {{ sudo_username.stdout }} | cut -d: -f6 )/.ssh/"
      become: yes
      become_user: "{{ sudo_username.stdout }}"
      when: sudo_username.rc | int == 0
      register: sudo_ssh_path
      changed_when: False

    - set_fact:
        sudo_ssh_path: "{{ sudo_ssh_path.stdout | string }}"
      when: sudo_ssh_path.rc | int == 0

    - name: Check if current user has a pubkey file
      stat:
        path: "{{ sudo_ssh_path }}/id_rsa.pub"
      register: pubkey_current_user_stat
      become_user: "{{ ansible_env.USER }}"
      when: pubkey_from_current_user

    - name: Validate file content
      shell:
        cmd: "ssh-keygen -lf {{ sudo_ssh_path }}/id_rsa.pub"
      register: pubkey_current_user_validate
      when: pubkey_current_user_stat.stat['exists'] == true
      changed_when: False

    - name: Save pubkey from the current user to a variable
      set_fact:
        pubkey_current_content: "{{ lookup('file','{{ sudo_ssh_path }}/id_rsa.pub') }}"
      when: pubkey_current_user_validate.rc | int == 0

    delegate_to: localhost

  - name: Add pubkeys from current user
    authorized_key:
      user: "{{ agent_name }}"
      state: present
      key: "{{ pubkey_current_content }}"
    when: pubkey_current_content is regex("^ssh-rsa")

  - name: Add other pubkeys
    authorized_key:
      user: "{{ agent_name }}"
      state: present
      # Lookup is necessary as `authorized_key` expects content, not a file.
      key: "{{ lookup('file',item) }}"
    with_fileglob:
      - "*.pub"
    when: pubkey_from_others

  - name: chmod/chown homedir to make jail valid
    file:
      path: /home/{{ agent_name }}
      state: directory
      mode: 0750
      owner: root

  - name: Create data exchange directory
    file:
      path: /home/{{ agent_name }}/data
      state: directory
      mode: 0755
      owner: "{{ agent_name }}"

  - name: Create system root dirs within chroot
    file:
      path: /home/{{ agent_name }}/{{ item }}
      state: directory
      owner: root
    with_items:
      - usr
      - usr/bin
      - bin
      - lib
      - lib/x86_64-linux-gnu
      - lib64

  - name: Copy sh to chroot /bin
    copy:
      src: "/bin/sh"
      dest: "/home/{{ agent_name }}/bin/sh"
      mode: 0755
      remote_src: yes

  - name: Copy rsync to chroot /usr/bin
    copy:
      src: "/usr/bin/rsync"
      dest: "/home/{{ agent_name }}/usr/bin/rsync"
      mode: 0755
      remote_src: yes
    when: add_rsync

  - name: Copy necessary /lib libraries
    copy:
      src: "/lib/x86_64-linux-gnu/{{ item }}"
      dest: "/home/{{ agent_name }}/lib/x86_64-linux-gnu/{{ item }}"
      mode: 0755
      remote_src: yes
    with_items:
      - "libacl.so.1"
      - "libattr.so.1"
      - "libc.so.6"
      - "libcrypto.so.1.1"
      - "libdl.so.2"
      - "liblz4.so.1"
      - "libpopt.so.0"
      - "libpthread.so.0"
      - "libxxhash.so.0"
      - "libz.so.1"
      - "libzstd.so.1"
    when: not WSL1 and not WSL2

  - name: Copy necessary /usr/lib libraries
    copy:
      src: "/usr/lib/x86_64-linux-gnu/{{ item }}"
      dest: "/home/{{ agent_name }}/lib/x86_64-linux-gnu/{{ item }}"
      mode: 0755
      remote_src: yes
    with_items:
      - "libattr.so.1"
      - "libacl.so.1"
      - "libpopt.so.0"
    when: WSL1 or WSL2

  - name: Copy ld-linux-x86-64.so
    copy:
      src: "/lib64/ld-linux-x86-64.so.2"
      dest: "/home/{{ agent_name }}/lib64/ld-linux-x86-64.so.2"
      mode: 0755
      remote_src: yes

  - name: Remove unnecessary files
    file:
      path: "/home/{{ agent_name }}/{{ item }}"
      state: absent
    loop:
      - ".bashrc"
      - ".bash_profile"
      - ".bash_logout"
      - ".profile"
      - ".logout"

  become: yes
